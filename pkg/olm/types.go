package olm


type DeploymentStatus struct {
	// Deployments are ready to serve requests
	Ready []string `json:"ready,omitempty"`
	// Deployments are starting, may or may not succeed
	Starting []string `json:"starting,omitempty"`
	// Deployments are not starting, unclear what next step will be
	Stopped []string `json:"stopped,omitempty"`
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DeploymentStatus) DeepCopyInto(out *DeploymentStatus) {
	*out = *in
	if in.Ready != nil {
		in, out := &in.Ready, &out.Ready
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Starting != nil {
		in, out := &in.Starting, &out.Starting
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Stopped != nil {
		in, out := &in.Stopped, &out.Stopped
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Deployments.
func (in *DeploymentStatus) DeepCopy() *DeploymentStatus {
	if in == nil {
		return nil
	}
	out := new(DeploymentStatus)
	in.DeepCopyInto(out)
	return out
}

type deployments struct {
	countFunc          func() int
	nameFunc           func(i int) string
	specReplicasFunc   func(i int) int32
	statusReplicasFunc func(i int) int32
	readyReplicasFunc  func(i int) int32
}

func (obj deployments) count() int {
	return obj.countFunc()
}

func (obj deployments) name(i int) string {
	return obj.nameFunc(i)
}

func (obj deployments) specReplicas(i int) int32 {
	return obj.specReplicasFunc(i)
}

func (obj deployments) statusReplicas(i int) int32 {
	return obj.statusReplicasFunc(i)
}

func (obj deployments) readyReplicas(i int) int32 {
	return obj.readyReplicasFunc(i)
}
